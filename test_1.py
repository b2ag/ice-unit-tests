#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import pytest
import re
import socket
import struct


ice_executable = '/usr/bin/faf-ice-adapter'
ice_options = {
 'id':  12345,
 'login': 'Rhiza',
 'rpc_port': 10000 + 0,
 'gpgnet_port': 10000 + 1,
 'lobby_port': 10000 + 2,
}
ice_2nd_instance_options = {
 'id':  54321,
 'login': 'Kael',
 'rpc_port': 20000 + 0,
 'gpgnet_port': 20000 + 1,
 'lobby_port': 20000 + 2,
}


def GpgNetMessage( list_of_messages ):
 if type( list_of_messages ) is not list:
  raise Exception("Expected list of tuples (header,payload) in GpgNetMessage.")
 result_data = b''
 for message in list_of_messages:
  header = message[0]
  result_data += struct.pack( 'I', len(header) )
  result_data += header.encode()
  count_of_chunks = len( message ) - 1
  result_data += struct.pack( 'I', count_of_chunks )
  for chunk_number in range(count_of_chunks):
   payload = message[ chunk_number + 1 ]
   if type( payload ) is int:
    result_data += b'\x00'
    result_data += struct.pack( 'I', payload )
   elif type( payload ) is str:
    result_data += b'\x01' 
    result_data += struct.pack( 'I', len(payload) )
    result_data += payload.encode()
   else: 
    raise Exception("Expected int or string for payload in GpgNetMessage, but got {}.".format(str(type(payload))))
 return result_data

def test_gpgmessage():
 assert list(GpgNetMessage( [ ('GameState', 'Idle') ] )) == [ 0x09, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x49, 0x64, 0x6c, 0x65 ]
 assert list(GpgNetMessage( [ ('CreateLobby', 0, 9010, 'b2ag', 96329, 1 ) ] )) == [ 0x0b, 0x00, 0x00, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x23, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x62, 0x32, 0x61, 0x67, 0x00, 0x49, 0x78, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ]
 assert list(GpgNetMessage( [ ('GameState', 'Lobby') ] )) == [ 0x09, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x01, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x62, 0x62, 0x79  ]
 assert list(GpgNetMessage( [ ('HostGame', 'scmp_012') ] )) == [ 0x08, 0x00, 0x00, 0x00, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x73, 0x63, 0x6d, 0x70, 0x5f, 0x30, 0x31, 0x32 ]
 assert list(GpgNetMessage( [ ('PlayerOption', '96329', 'StartSpot', 1) ] )) == [ 0x0c, 0x00, 0x00, 0x00, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x39, 0x36, 0x33, 0x32, 0x39, 0x01, 0x09, 0x00, 0x00, 0x00, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x00, 0x01, 0x00, 0x00, 0x00 ]
 assert list(GpgNetMessage( [ ( 'ClearSlot', 2 ) ] )) == [ 0x09, 0x00, 0x00, 0x00, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 ]
 longMessage = [
   ( 'GameOption', 'ShareUnitCap', 'none' ),
   ( 'GameOption', 'FogOfWar', 'explored' ),
   ( 'GameOption', 'Victory', 'sandbox' ),
   ( 'GameOption', 'Timeouts', '-1' ),
   ( 'GameOption', 'GameSpeed', 'adjustable' ),
   ( 'GameOption', 'AllowObservers', 1 ),
   ( 'GameOption', 'CheatsEnabled', 'true' ),
   ( 'GameOption', 'CivilianAlliance', 'enemy' ),
   ( 'GameOption', 'RevealCivilians', 'Yes' ),
   ( 'GameOption', 'PrebuiltUnits', 'Off' ),
   ( 'GameOption', 'NoRushOption', 'Off' ),
   ( 'GameOption', 'RandomMap', 'Off' ),
   ( 'GameOption', 'Score', 'no' ),
   ( 'GameOption', 'Share', 'ShareUntilDeath' ),
   ( 'GameOption', 'TeamSpawn', 'fixed' ),
   ( 'GameOption', 'TeamLock', 'locked' ),
   ( 'GameOption', 'AutoTeams', 'tvsb' ),
   ( 'GameOption', 'CheatMult', '2.0' ),
   ( 'GameOption', 'BuildMult', '2.0' ),
   ( 'GameOption', 'TMLRandom', '0' ),
   ( 'GameOption', 'LandExpansionsAllowed', '5' ),
   ( 'GameOption', 'NavalExpansionsAllowed', '4' ),
   ( 'GameOption', 'OmniCheat', 'on' ),
   ( 'GameOption', 'ScenarioFile', '/maps/scmp_012/scmp_012_scenario.lua' ),
   ( 'GameOption', 'Slots', 2 ),
  ]
 assert list(GpgNetMessage( longMessage )) == [ 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 
   0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 
   0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x53, 
   0x68, 0x61, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 
   0x43, 0x61, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00, 
   0x6e, 0x6f, 0x6e, 0x65, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x08, 
   0x00, 0x00, 0x00, 0x46, 0x6f, 0x67, 0x4f, 0x66, 
   0x57, 0x61, 0x72, 0x01, 0x08, 0x00, 0x00, 0x00, 
   0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 
   0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 
   0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 
   0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x56, 
   0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x01, 0x07, 
   0x00, 0x00, 0x00, 0x73, 0x61, 0x6e, 0x64, 0x62, 
   0x6f, 0x78, 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 
   0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 
   0x02, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 
   0x00, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 
   0x73, 0x01, 0x02, 0x00, 0x00, 0x00, 0x2d, 0x31, 
   0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 
   0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 
   0x00, 0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 0x47, 
   0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 
   0x01, 0x0a, 0x00, 0x00, 0x00, 0x61, 0x64, 0x6a, 
   0x75, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x0a, 
   0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 
   0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 
   0x00, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x41, 0x6c, 
   0x6c, 0x6f, 0x77, 0x4f, 0x62, 0x73, 0x65, 0x72, 
   0x76, 0x65, 0x72, 0x73, 0x00, 0x01, 0x00, 0x00, 
   0x00, 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 
   0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 
   0x00, 0x00, 0x00, 0x01, 0x0d, 0x00, 0x00, 0x00, 
   0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 
   0x61, 0x62, 0x6c, 0x65, 0x64, 0x01, 0x04, 0x00, 
   0x00, 0x00, 0x74, 0x72, 0x75, 0x65, 0x0a, 0x00, 
   0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 
   0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 
   0x01, 0x10, 0x00, 0x00, 0x00, 0x43, 0x69, 0x76, 
   0x69, 0x6c, 0x69, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 
   0x69, 0x61, 0x6e, 0x63, 0x65, 0x01, 0x05, 0x00, 
   0x00, 0x00, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x0a, 
   0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 
   0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 
   0x00, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x65, 
   0x76, 0x65, 0x61, 0x6c, 0x43, 0x69, 0x76, 0x69, 
   0x6c, 0x69, 0x61, 0x6e, 0x73, 0x01, 0x03, 0x00, 
   0x00, 0x00, 0x59, 0x65, 0x73, 0x0a, 0x00, 0x00, 
   0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 
   0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 
   0x0d, 0x00, 0x00, 0x00, 0x50, 0x72, 0x65, 0x62, 
   0x75, 0x69, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74, 
   0x73, 0x01, 0x03, 0x00, 0x00, 0x00, 0x4f, 0x66, 
   0x66, 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 
   0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 
   0x00, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 
   0x4e, 0x6f, 0x52, 0x75, 0x73, 0x68, 0x4f, 0x70, 
   0x74, 0x69, 0x6f, 0x6e, 0x01, 0x03, 0x00, 0x00, 
   0x00, 0x4f, 0x66, 0x66, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x09, 
   0x00, 0x00, 0x00, 0x52, 0x61, 0x6e, 0x64, 0x6f, 
   0x6d, 0x4d, 0x61, 0x70, 0x01, 0x03, 0x00, 0x00, 
   0x00, 0x4f, 0x66, 0x66, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x05, 
   0x00, 0x00, 0x00, 0x53, 0x63, 0x6f, 0x72, 0x65, 
   0x01, 0x02, 0x00, 0x00, 0x00, 0x6e, 0x6f, 0x0a, 
   0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 
   0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 
   0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x53, 0x68, 
   0x61, 0x72, 0x65, 0x01, 0x0f, 0x00, 0x00, 0x00, 
   0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x6e, 0x74, 
   0x69, 0x6c, 0x44, 0x65, 0x61, 0x74, 0x68, 0x0a, 
   0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 
   0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 
   0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 0x54, 0x65, 
   0x61, 0x6d, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x01, 
   0x05, 0x00, 0x00, 0x00, 0x66, 0x69, 0x78, 0x65, 
   0x64, 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 
   0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 
   0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 
   0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 
   0x01, 0x06, 0x00, 0x00, 0x00, 0x6c, 0x6f, 0x63, 
   0x6b, 0x65, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x47, 
   0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 
   0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x09, 0x00, 
   0x00, 0x00, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 
   0x61, 0x6d, 0x73, 0x01, 0x04, 0x00, 0x00, 0x00, 
   0x74, 0x76, 0x73, 0x62, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x09, 
   0x00, 0x00, 0x00, 0x43, 0x68, 0x65, 0x61, 0x74, 
   0x4d, 0x75, 0x6c, 0x74, 0x01, 0x03, 0x00, 0x00, 
   0x00, 0x32, 0x2e, 0x30, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x09, 
   0x00, 0x00, 0x00, 0x42, 0x75, 0x69, 0x6c, 0x64, 
   0x4d, 0x75, 0x6c, 0x74, 0x01, 0x03, 0x00, 0x00, 
   0x00, 0x32, 0x2e, 0x30, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x09, 
   0x00, 0x00, 0x00, 0x54, 0x4d, 0x4c, 0x52, 0x61, 
   0x6e, 0x64, 0x6f, 0x6d, 0x01, 0x01, 0x00, 0x00, 
   0x00, 0x30, 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 
   0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 
   0x02, 0x00, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 
   0x00, 0x4c, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x70, 
   0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x41, 
   0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x01, 0x01, 
   0x00, 0x00, 0x00, 0x35, 0x0a, 0x00, 0x00, 0x00, 
   0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 
   0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x01, 0x16, 
   0x00, 0x00, 0x00, 0x4e, 0x61, 0x76, 0x61, 0x6c, 
   0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 
   0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 
   0x64, 0x01, 0x01, 0x00, 0x00, 0x00, 0x34, 0x0a, 
   0x00, 0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 
   0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 
   0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 0x4f, 0x6d, 
   0x6e, 0x69, 0x43, 0x68, 0x65, 0x61, 0x74, 0x01, 
   0x02, 0x00, 0x00, 0x00, 0x6f, 0x6e, 0x0a, 0x00, 
   0x00, 0x00, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 
   0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x00, 0x00, 
   0x01, 0x0c, 0x00, 0x00, 0x00, 0x53, 0x63, 0x65, 
   0x6e, 0x61, 0x72, 0x69, 0x6f, 0x46, 0x69, 0x6c, 
   0x65, 0x01, 0x24, 0x00, 0x00, 0x00, 0x2f, 0x6d, 
   0x61, 0x70, 0x73, 0x2f, 0x73, 0x63, 0x6d, 0x70, 
   0x5f, 0x30, 0x31, 0x32, 0x2f, 0x73, 0x63, 0x6d, 
   0x70, 0x5f, 0x30, 0x31, 0x32, 0x5f, 0x73, 0x63, 
   0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x6c, 
   0x75, 0x61, 0x0a, 0x00, 0x00, 0x00, 0x47, 0x61, 
   0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 
   0x02, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 
   0x00, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x00, 0x02, 
   0x00, 0x00, 0x00 ]

def _test_initial_handshake( ice_process, rpc_client, gpgnet_gameside, ice_options ):
 try: 
  assert rpc_client.recv(1024) == b'{"jsonrpc":"2.0","method":"onConnectionStateChanged","params":["Connected"]}'
 except socket.timeout:
  pass
 gpgnet_gameside.send( GpgNetMessage( [ ('GameState', 'Idle') ] ) )
 assert rpc_client.recv(1024) == b'{"jsonrpc":"2.0","method":"onGpgNetMessageReceived","params":["GameState",["Idle"]]}'
 assert gpgnet_gameside.recv(1024) == GpgNetMessage([ ( 'CreateLobby', 0, ice_options['lobby_port'], ice_options['login'], ice_options['id'], 1 ) ])
 gpgnet_gameside.send( GpgNetMessage( [ ('GameState', 'Lobby') ] ) )
 assert rpc_client.recv(1024) == b'{"jsonrpc":"2.0","method":"onGpgNetMessageReceived","params":["GameState",["Lobby"]]}'
 rpc_client.send(b'{"jsonrpc":"2.0","method":"setIceServers","params":[{"urls":"stun:stun.l.google.com:19302"}]}')
def test_initial_handshake( ice_process, rpc_client, gpgnet_gameside ):
 _test_initial_handshake( ice_process, rpc_client, gpgnet_gameside, ice_options )
 
def _test_host_game( ice_process, rpc_client, gpgnet_gameside, ice_options ):
 _test_initial_handshake( ice_process, rpc_client, gpgnet_gameside, ice_options )
 rpc_client.send(b'{"jsonrpc":"2.0","method":"hostGame","params":["monument_valley.v0001"]}')
 assert gpgnet_gameside.recv(1024) == GpgNetMessage([ ( 'HostGame', 'monument_valley.v0001' ) ])
def test_host_game( ice_process, rpc_client, gpgnet_gameside ):
 _test_host_game( ice_process, rpc_client, gpgnet_gameside, ice_options )

def _test_join_game( ice_process, rpc_client, gpgnet_gameside, ice_options, remote_login, remote_id ):
 _test_initial_handshake( ice_process, rpc_client, gpgnet_gameside, ice_options )
 rpc_client.send(b'{"jsonrpc":"2.0","method":"joinGame","params":["'+remote_login.encode()+b'",'+str(remote_id).encode()+b']}')
 gameside_message = gpgnet_gameside.recv(1024)
 address = re.findall( r'(127.0.0.1:[0-9]+)', str(gameside_message) )[0]
 assert gameside_message == GpgNetMessage([ ( 'JoinGame', address, remote_login, remote_id ) ])
 return address
def test_join_game( ice_process, rpc_client, gpgnet_gameside ):
 _test_join_game( ice_process, rpc_client, gpgnet_gameside, ice_options, ice_options['login'], ice_options['id'] )

def _test_connect_to_peer( ice_process, rpc_client, gpgnet_gameside, remote_login, remote_id, offer ):
 rpc_client.send(b'{"jsonrpc":"2.0","method":"connectToPeer","params":["'+remote_login.encode()+b'",'+str(remote_id).encode()+b','+(b'true' if offer else b'false')+b']}')

def simple_socket_setup( ip, port ):
 simple_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
 simple_socket.connect(( ip, port ))
 simple_socket.settimeout(1)
 return simple_socket

def forward_ice_msg( from_socket, to_socket ):
 return_messages = []
 try:
  raw_messages = from_socket.recv(1024).split(b'}{')
  for i in range(len(raw_messages)):
   if i < len(raw_messages)-1:
    raw_messages[i] += b'}'
   if i > 0:
    raw_messages[i] = b'{' + raw_messages[i]
  for raw_message in raw_messages:
   message = json.loads(raw_message)
   if message['method'] == 'onIceMsg':
    message['method'] = 'iceMsg'
    message['params'] = [ message['params'][0], message['params'][2] ]
    to_socket.send( json.dumps( message ).encode() )
   else:
    return_messages.append( message )
 except BlockingIOError:
  pass
 return return_messages

def test_ice_local_connection( ice_process, rpc_client, gpgnet_gameside, peer_traffic_gameside, ice_2nd_process, rpc_2nd_client, gpgnet_2nd_gameside, peer_traffic_2nd_gameside ):

 _test_host_game( ice_process, rpc_client, gpgnet_gameside, ice_options )
 peer2_address = _test_join_game( ice_2nd_process, rpc_2nd_client, gpgnet_2nd_gameside, ice_2nd_instance_options, ice_options['login'], ice_options['id'] )
 peer2_address = peer2_address.split(':')
 peer2 = simple_socket_setup( peer2_address[0], int(peer2_address[1]) )

 _test_connect_to_peer( ice_process, rpc_client, gpgnet_gameside, ice_2nd_instance_options['login'], ice_2nd_instance_options['id'], True )
 gameside_message = gpgnet_gameside.recv(1024)
 peer_address = re.findall( r'(127.0.0.1:[0-9]+)', str(gameside_message) )[0].split(':')
 peer = simple_socket_setup( peer_address[0], int(peer_address[1]) ) 

 rpc_client.setblocking(0)
 rpc_2nd_client.setblocking(0)
 peer_connected = False
 peer2_connected = False
 for i in range(100000):
  messages = forward_ice_msg( rpc_client, rpc_2nd_client )
  for message in messages:
   if message['method'] == 'onDatachannelOpen' and message['params'] == [ ice_options['id'], ice_2nd_instance_options['id']]:
    peer2_connected = True
  messages = forward_ice_msg( rpc_2nd_client, rpc_client )  
  for message in messages:
   if message['method'] == 'onDatachannelOpen' and message['params'] == [ ice_2nd_instance_options['id'], ice_options['id']]:
    peer_connected = True
  if peer_connected and peer2_connected:
   break
 assert peer_connected and peer2_connected
 rpc_client.setblocking(1)
 rpc_2nd_client.setblocking(1)

 for i in range(10000): 
  peer2.send(b'PING')
  assert peer_traffic_gameside.recv(1024) == b'PING'
  peer.send(b'PONG')
  assert peer_traffic_2nd_gameside.recv(1024) == b'PONG'
  

